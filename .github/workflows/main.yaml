name: Flutter CI

# This workflow is triggered on pushes to the repository.

on:
  push:
    branches:
      - master
# on: push # Default will running for every branch.

jobs:
  build:
    name: Build Flutter APP APK
    # This job will run on 'ubuntu virtual machine' or macos
    runs-on: ubuntu-18.04 # or 'macos-latest'; 'macos-10.15'; 'windows-latest'; 'ubuntu-latest' or 'ubuntu-18.04'
    steps:
      #- run: echo "::set-env name=APP_VERSION::release_$(date +'%Y-%m-%d_%H-%m-%S')"
      # Setup Java environment in order to build the Android app.
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # Setup the flutter environment.
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable' # 'beta' 'dev', 'alpha', default to: 'stable'
          #flutter-version: '1.22.x' # you can also specify exact version of flutter
      # Enable Web:
      #- run: flutter config --enable-web

      # Get flutter dependencies.
      - run: flutter pub get

      # Check for any formatting issues in the code.
      - run: flutter format --set-exit-if-changed .

      # Statically analyze the Dart code for any errors.
      - run: flutter analyze .

      # Run widget tests for our flutter project.
      #- run: flutter test

      # Build Debug APK
      - run: flutter build apk --debug --split-per-abi

      # Build  Release apk, ios, web
      - run: flutter build apk
      #- run: flutter build ios --release --no-codesign
      #- run: flutter build web


      # Upload generated apk to the artifacts.
      - uses: actions/upload-artifact@v1
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk

      - name: Create a Release APK
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/debug/*.apk"
          #artifacts: "build/app/outputs/apk/debug/*.apk,build/ios/iphoneos/app.ipa"
          token: ${{ secrets.TOKEN }}

  # Matrix Testing:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          #flutter-version: '1.20.2'
          channel: 'stable'
      - run: dart --version
      - run: flutter --version
      - run: flutter pub get
      #- run: flutter test
      - run: flutter build apk